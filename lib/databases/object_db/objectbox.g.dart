// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../model/category.dart';
import '../../model/credit_card.dart';
import '../../model/financial_income.dart';
import '../../model/speding_money.dart';
import '../../model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 8118950560246083324),
      name: 'FinancialIncome',
      lastPropertyId: const IdUid(8, 7096820149567661762),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6769802294495446717),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6431685945790832814),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6321970583276573097),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 57938236244246455),
            name: 'dateRegister',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5366907371897082188),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8190284111958072432),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 2276951893719110841),
            relationTarget: 'Category'),
        ModelProperty(
            id: const IdUid(8, 7096820149567661762),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 8476377373358227536),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7594537844688304618),
      name: 'SpedingMoney',
      lastPropertyId: const IdUid(12, 1170970019885387891),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2279436412977283790),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4273567909821498331),
            name: 'amountPaid',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3336059092481271411),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5048618011353296659),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4910969762392873803),
            name: 'dateRegister',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7541455126940798107),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5026955437404511723),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 6446637483268869612),
            relationTarget: 'Category'),
        ModelProperty(
            id: const IdUid(9, 3534326678494092358),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 2432221722895072948),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(10, 5567715936330986244),
            name: 'creditCardId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 4303879689631627431),
            relationTarget: 'CreditCard'),
        ModelProperty(
            id: const IdUid(11, 1392107855688344693),
            name: 'uuidPortion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1170970019885387891),
            name: 'parcelPosition',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 578568064908951314),
      name: 'User',
      lastPropertyId: const IdUid(5, 8725801967159225986),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6027775699903880889),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 330375417605935388),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3469911718535871214),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8032024584915483322),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8725801967159225986),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(12, 6207810127125082955))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5056145415536512475),
      name: 'Category',
      lastPropertyId: const IdUid(6, 1351280657016836101),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6100046022574176282),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1935798474697117744),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5655417622135396647),
            name: 'icon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3853432990258923846),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2495103148938391910),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1351280657016836101),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 3847134727989014556),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7335465848714979507),
      name: 'CreditCard',
      lastPropertyId: const IdUid(7, 1235134083990040291),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6204205894172176556),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7650971319387273095),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9083366416428969006),
            name: 'dayOfPayment',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5883808558603136516),
            name: 'dayGoodBuy',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5545224664221087356),
            name: 'limit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3889733627626260869),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1235134083990040291),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 4311383656448996701),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 7335465848714979507),
      lastIndexId: const IdUid(14, 4311383656448996701),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [861162380915200976, 7328518671491570113],
      retiredIndexUids: const [4284874061219550202, 1070473814994430688],
      retiredPropertyUids: const [
        7615447201201215313,
        3003170290294033733,
        7312247051740372600,
        8382524220615196139,
        7251818866468335474,
        2396819350577565862,
        8231254630696679321,
        4224758401422157435,
        5492808284356580458,
        1623471520233072122,
        2350848137964703413,
        2856779970064091781,
        447126276237333090,
        4050933722949294376,
        7261378321634822017,
        1377031575572643861
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FinancialIncome: EntityDefinition<FinancialIncome>(
        model: _entities[0],
        toOneRelations: (FinancialIncome object) =>
            [object.category, object.user],
        toManyRelations: (FinancialIncome object) => {},
        getId: (FinancialIncome object) => object.id,
        setId: (FinancialIncome object, int id) {
          object.id = id;
        },
        objectToFB: (FinancialIncome object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.value);
          fbb.addInt64(3, object.dateRegister.millisecondsSinceEpoch);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(6, object.category.targetId);
          fbb.addInt64(7, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dateRegisterParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = FinancialIncome(
              name: nameParam,
              value: valueParam,
              dateRegister: dateRegisterParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.user.attach(store);
          return object;
        }),
    SpedingMoney: EntityDefinition<SpedingMoney>(
        model: _entities[1],
        toOneRelations: (SpedingMoney object) =>
            [object.category, object.user, object.creditCard],
        toManyRelations: (SpedingMoney object) => {},
        getId: (SpedingMoney object) => object.id,
        setId: (SpedingMoney object, int id) {
          object.id = id;
        },
        objectToFB: (SpedingMoney object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final uuidPortionOffset = object.uuidPortion == null
              ? null
              : fbb.writeString(object.uuidPortion!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amountPaid);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.value);
          fbb.addInt64(4, object.dateRegister.millisecondsSinceEpoch);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(7, object.category.targetId);
          fbb.addInt64(8, object.user.targetId);
          fbb.addInt64(9, object.creditCard.targetId);
          fbb.addOffset(10, uuidPortionOffset);
          fbb.addInt64(11, object.parcelPosition);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dateRegisterParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = SpedingMoney(
              name: nameParam,
              value: valueParam,
              dateRegister: dateRegisterParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amountPaid =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..uuidPortion = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..parcelPosition =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.user.attach(store);
          object.creditCard.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.creditCard.attach(store);
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final avatarOffset = fbb.writeString(object.avatar);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, avatarOffset);
          fbb.addOffset(4, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final avatarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = User(uidParam, nameParam, emailParam, avatarParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[3],
        toOneRelations: (Category object) => [object.user],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.icon);
          fbb.addOffset(3, colorOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addInt64(5, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Category(
              name: nameParam,
              icon: iconParam,
              type: typeParam,
              color: colorParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.user.attach(store);
          return object;
        }),
    CreditCard: EntityDefinition<CreditCard>(
        model: _entities[4],
        toOneRelations: (CreditCard object) => [object.user],
        toManyRelations: (CreditCard object) => {},
        getId: (CreditCard object) => object.id,
        setId: (CreditCard object, int id) {
          object.id = id;
        },
        objectToFB: (CreditCard object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dayOfPayment);
          fbb.addInt64(3, object.dayGoodBuy);
          fbb.addFloat64(4, object.limit);
          fbb.addOffset(5, colorOffset);
          fbb.addInt64(6, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dayOfPaymentParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dayGoodBuyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final limitParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = CreditCard(nameParam, dayOfPaymentParam,
              dayGoodBuyParam, colorParam, limitParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.user.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FinancialIncome] entity fields to define ObjectBox queries.
class FinancialIncome_ {
  /// see [FinancialIncome.id]
  static final id =
      QueryIntegerProperty<FinancialIncome>(_entities[0].properties[0]);

  /// see [FinancialIncome.name]
  static final name =
      QueryStringProperty<FinancialIncome>(_entities[0].properties[1]);

  /// see [FinancialIncome.value]
  static final value =
      QueryDoubleProperty<FinancialIncome>(_entities[0].properties[2]);

  /// see [FinancialIncome.dateRegister]
  static final dateRegister =
      QueryIntegerProperty<FinancialIncome>(_entities[0].properties[3]);

  /// see [FinancialIncome.description]
  static final description =
      QueryStringProperty<FinancialIncome>(_entities[0].properties[4]);

  /// see [FinancialIncome.category]
  static final category =
      QueryRelationToOne<FinancialIncome, Category>(_entities[0].properties[5]);

  /// see [FinancialIncome.user]
  static final user =
      QueryRelationToOne<FinancialIncome, User>(_entities[0].properties[6]);
}

/// [SpedingMoney] entity fields to define ObjectBox queries.
class SpedingMoney_ {
  /// see [SpedingMoney.id]
  static final id =
      QueryIntegerProperty<SpedingMoney>(_entities[1].properties[0]);

  /// see [SpedingMoney.amountPaid]
  static final amountPaid =
      QueryDoubleProperty<SpedingMoney>(_entities[1].properties[1]);

  /// see [SpedingMoney.name]
  static final name =
      QueryStringProperty<SpedingMoney>(_entities[1].properties[2]);

  /// see [SpedingMoney.value]
  static final value =
      QueryDoubleProperty<SpedingMoney>(_entities[1].properties[3]);

  /// see [SpedingMoney.dateRegister]
  static final dateRegister =
      QueryIntegerProperty<SpedingMoney>(_entities[1].properties[4]);

  /// see [SpedingMoney.description]
  static final description =
      QueryStringProperty<SpedingMoney>(_entities[1].properties[5]);

  /// see [SpedingMoney.category]
  static final category =
      QueryRelationToOne<SpedingMoney, Category>(_entities[1].properties[6]);

  /// see [SpedingMoney.user]
  static final user =
      QueryRelationToOne<SpedingMoney, User>(_entities[1].properties[7]);

  /// see [SpedingMoney.creditCard]
  static final creditCard =
      QueryRelationToOne<SpedingMoney, CreditCard>(_entities[1].properties[8]);

  /// see [SpedingMoney.uuidPortion]
  static final uuidPortion =
      QueryStringProperty<SpedingMoney>(_entities[1].properties[9]);

  /// see [SpedingMoney.parcelPosition]
  static final parcelPosition =
      QueryIntegerProperty<SpedingMoney>(_entities[1].properties[10]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[2].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[2].properties[2]);

  /// see [User.avatar]
  static final avatar = QueryStringProperty<User>(_entities[2].properties[3]);

  /// see [User.uid]
  static final uid = QueryStringProperty<User>(_entities[2].properties[4]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[3].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[3].properties[1]);

  /// see [Category.icon]
  static final icon =
      QueryIntegerProperty<Category>(_entities[3].properties[2]);

  /// see [Category.color]
  static final color =
      QueryStringProperty<Category>(_entities[3].properties[3]);

  /// see [Category.type]
  static final type = QueryStringProperty<Category>(_entities[3].properties[4]);

  /// see [Category.user]
  static final user =
      QueryRelationToOne<Category, User>(_entities[3].properties[5]);
}

/// [CreditCard] entity fields to define ObjectBox queries.
class CreditCard_ {
  /// see [CreditCard.id]
  static final id =
      QueryIntegerProperty<CreditCard>(_entities[4].properties[0]);

  /// see [CreditCard.name]
  static final name =
      QueryStringProperty<CreditCard>(_entities[4].properties[1]);

  /// see [CreditCard.dayOfPayment]
  static final dayOfPayment =
      QueryIntegerProperty<CreditCard>(_entities[4].properties[2]);

  /// see [CreditCard.dayGoodBuy]
  static final dayGoodBuy =
      QueryIntegerProperty<CreditCard>(_entities[4].properties[3]);

  /// see [CreditCard.limit]
  static final limit =
      QueryDoubleProperty<CreditCard>(_entities[4].properties[4]);

  /// see [CreditCard.color]
  static final color =
      QueryStringProperty<CreditCard>(_entities[4].properties[5]);

  /// see [CreditCard.user]
  static final user =
      QueryRelationToOne<CreditCard, User>(_entities[4].properties[6]);
}
