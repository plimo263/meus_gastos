// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../model/category.dart';
import '../../model/financial_income.dart';
import '../../model/speding_money.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 861162380915200976),
      name: 'Category',
      lastPropertyId: const IdUid(3, 2396819350577565862),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8382524220615196139),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7251818866468335474),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 8628383768506270010)),
        ModelProperty(
            id: const IdUid(3, 2396819350577565862),
            name: 'icon',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8118950560246083324),
      name: 'FinancialIncome',
      lastPropertyId: const IdUid(6, 3003170290294033733),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6769802294495446717),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6431685945790832814),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6321970583276573097),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 57938236244246455),
            name: 'dateRegister',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5366907371897082188),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3003170290294033733),
            name: 'categoryRefId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1070473814994430688),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7594537844688304618),
      name: 'SpedingMoney',
      lastPropertyId: const IdUid(7, 7615447201201215313),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2279436412977283790),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4273567909821498331),
            name: 'amountPaid',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3336059092481271411),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5048618011353296659),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4910969762392873803),
            name: 'dateRegister',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7541455126940798107),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7615447201201215313),
            name: 'categoryRefId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 4284874061219550202),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 7594537844688304618),
      lastIndexId: const IdUid(3, 4284874061219550202),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Category: EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.icon);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final iconParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Category(name: nameParam, icon: iconParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    FinancialIncome: EntityDefinition<FinancialIncome>(
        model: _entities[1],
        toOneRelations: (FinancialIncome object) => [object.categoryRef],
        toManyRelations: (FinancialIncome object) => {},
        getId: (FinancialIncome object) => object.id,
        setId: (FinancialIncome object, int id) {
          object.id = id;
        },
        objectToFB: (FinancialIncome object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.value);
          fbb.addInt64(3, object.dateRegister.millisecondsSinceEpoch);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.categoryRef.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dateRegisterParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = FinancialIncome(
              name: nameParam,
              value: valueParam,
              dateRegister: dateRegisterParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.categoryRef.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.categoryRef.attach(store);
          return object;
        }),
    SpedingMoney: EntityDefinition<SpedingMoney>(
        model: _entities[2],
        toOneRelations: (SpedingMoney object) => [object.categoryRef],
        toManyRelations: (SpedingMoney object) => {},
        getId: (SpedingMoney object) => object.id,
        setId: (SpedingMoney object, int id) {
          object.id = id;
        },
        objectToFB: (SpedingMoney object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amountPaid);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.value);
          fbb.addInt64(4, object.dateRegister.millisecondsSinceEpoch);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.categoryRef.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dateRegisterParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = SpedingMoney(
              name: nameParam,
              value: valueParam,
              dateRegister: dateRegisterParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amountPaid =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.categoryRef.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.categoryRef.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[0].properties[1]);

  /// see [Category.icon]
  static final icon =
      QueryIntegerProperty<Category>(_entities[0].properties[2]);
}

/// [FinancialIncome] entity fields to define ObjectBox queries.
class FinancialIncome_ {
  /// see [FinancialIncome.id]
  static final id =
      QueryIntegerProperty<FinancialIncome>(_entities[1].properties[0]);

  /// see [FinancialIncome.name]
  static final name =
      QueryStringProperty<FinancialIncome>(_entities[1].properties[1]);

  /// see [FinancialIncome.value]
  static final value =
      QueryDoubleProperty<FinancialIncome>(_entities[1].properties[2]);

  /// see [FinancialIncome.dateRegister]
  static final dateRegister =
      QueryIntegerProperty<FinancialIncome>(_entities[1].properties[3]);

  /// see [FinancialIncome.description]
  static final description =
      QueryStringProperty<FinancialIncome>(_entities[1].properties[4]);

  /// see [FinancialIncome.categoryRef]
  static final categoryRef =
      QueryRelationToOne<FinancialIncome, Category>(_entities[1].properties[5]);
}

/// [SpedingMoney] entity fields to define ObjectBox queries.
class SpedingMoney_ {
  /// see [SpedingMoney.id]
  static final id =
      QueryIntegerProperty<SpedingMoney>(_entities[2].properties[0]);

  /// see [SpedingMoney.amountPaid]
  static final amountPaid =
      QueryDoubleProperty<SpedingMoney>(_entities[2].properties[1]);

  /// see [SpedingMoney.name]
  static final name =
      QueryStringProperty<SpedingMoney>(_entities[2].properties[2]);

  /// see [SpedingMoney.value]
  static final value =
      QueryDoubleProperty<SpedingMoney>(_entities[2].properties[3]);

  /// see [SpedingMoney.dateRegister]
  static final dateRegister =
      QueryIntegerProperty<SpedingMoney>(_entities[2].properties[4]);

  /// see [SpedingMoney.description]
  static final description =
      QueryStringProperty<SpedingMoney>(_entities[2].properties[5]);

  /// see [SpedingMoney.categoryRef]
  static final categoryRef =
      QueryRelationToOne<SpedingMoney, Category>(_entities[2].properties[6]);
}
